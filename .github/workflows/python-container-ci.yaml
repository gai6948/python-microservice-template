name: Python Container CI Pipeline

on:
  push:
    branches:
      - "main"
      - "master"
      - "releases/v*"

jobs:
  python-ci:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write # Push
      id-token: write # Cosign - signing the images with GitHub OIDC Token
      security-events: write # Trivy - write vulnerability report

    steps:
      - uses: actions/checkout@v1

      - uses: actions/setup-python@v1
        id: setup-python
        with:
          python-version: 3.9

      - name: Get cache metadata
        id: cache-meta
        run: |
          CACHE_KEY="venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}"
          CACHE_PATH="./venv"
          echo "::set-output name=cache-key::$CACHE_KEY"
          echo "::set-output name=cache-path::$CACHE_PATH"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: false
          virtualenvs-in-project: true
          virtualenvs-path: ${{ steps.cache-meta.outputs.cache-path }}

      - name: Load cached venv
        id: cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.cache-meta.outputs.cache-path }}
          key: ${{ steps.cache-meta.outputs.cache-key }}

      - name: Install cosign
        uses: sigstore/cosign-installer@main

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m venv venv
          source venv/bin/activate
          pip install pylint flake8 bandit pytest pytest-cov
          poetry install --no-root

      - name: Run Tests
        run: |
          source venv/bin/activate
          make unit-test

      - name: Verify code style (Black)
        uses: psf/black@stable
        with:
          options: "--verbose --check"

      - name: Enforce code style (Flake8)
        # Will find config automatically in `setup.cfg`, `tox.ini`, or `.flake8` - https://flake8.pycqa.org/en/latest/user/configuration.html#configuration-locations
        run: |
          source venv/bin/activate
          flake8 ./webapi

      - name: Lint code
        # Will find config automatically in `pylintrc`, `.pylintrc`, `pyproject.toml`, NOT `setup.cfg` - https://pylint.pycqa.org/en/latest/user_guide/run.html#command-line-options
        run: |
          source venv/bin/activate
          PYLINT_CONDITIONAL_ARGS=()
          PYTHONPATH=$(pwd)
          pylint webapi/*.py "${PYLINT_CONDITIONAL_ARGS[@]}"

      - name: Code security check
        # Will find config automatically in `.bandit`, others have to specified with --ini - see https://github.com/PyCQA/bandit/issues/396#issuecomment-475152672
        run: |
          source venv/bin/activate
          BANDIT_CONDITIONAL_ARGS=()
          BANDIT_CONDITIONAL_ARGS+=( . --exclude ./venv )
          bandit -r "${BANDIT_CONDITIONAL_ARGS[@]}"

      - name: Get repository accesses
        id: get-repo
        run: |
          REPO=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')
          USERNAME=${{ github.actor }}
          PASSWORD=${{ secrets.GITHUB_TOKEN }}

          echo "::set-output name=repo::$REPO"
          echo "::set-output name=username::$USERNAME"
          echo "::set-output name=password::$PASSWORD"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ steps.get-repo.outputs.username }}
          password: ${{ steps.get-repo.outputs.password }}

      - name: Generate tags and image meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ghcr.io/${{ steps.get-repo.outputs.repo }}
          tags: |
            type=ref,event=tag
            type=sha

      - name: Build image
        uses: docker/build-push-action@v2
        with:
          context: .
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/${{ steps.get-repo.outputs.repo }}:latest
          cache-to: type=registry,ref=ghcr.io/${{ steps.get-repo.outputs.repo }}:latest,mode=max

      - name: Analyze image efficiency
        uses: MartinHeinz/dive-action@v0.1.3
        with:
          image: "ghcr.io/${{ steps.get-repo.outputs.repo }}:${{ steps.meta.outputs.version }}"
          exit-zero: true

      - name: Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "ghcr.io/${{ steps.get-repo.outputs.repo }}:${{ steps.meta.outputs.version }}"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Push container image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=registry,ref=ghcr.io/${{ steps.get-repo.outputs.repo }}:latest
          cache-to: type=registry,ref=ghcr.io/${{ steps.get-repo.outputs.repo }}:latest,mode=max

      - name: Sign the published Docker image
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: cosign sign ghcr.io/${{ steps.get-repo.outputs.repo }}:${{ steps.meta.outputs.version }}

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: "trivy-results.sarif"

      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          author_name: ${{ github.actor }}
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took,pullRequest # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
